<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGems</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index=irandom(5); //uma das gems aleatória
image_speed=0; //pra não ficar mudando o sprite (sem animação)

//var's
off=false;  //nao está selecionado
parado=false; //nao está caindo nem sendo movido pelo usuário
espera=false; //é um possível movimento para o usuário
match=0; //combinado
noMatch=false; //nao combinado
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objComb = instance_create(x,y,objCombinado);
objComb.corObj  = image_index;
cont += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
pontuacaoTotal += 50 * fase;
pontosFase += 50*fase;
//largura = (pontuacaoTotal/(fase*paramFase))*216;
largura = (pontosFase/(fase*paramFase))*216;
if(pontosFase &gt;= fase*paramFase)  
{
    paramFase += 2000*fase;
    fase+=1;
    largura = 0;
    pontosFase =0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>off=false;
//horizontal
if(x&lt;623) and (y&gt;=Yini){
    if( (!position_empty(x+65,y)) and (!position_empty(x+130,y))){
        var g1,g2;
        g1 = instance_position(x+65,y, objGems);
        g2 = instance_position(x+130,y, objGems);
        if(g1.parado == true &amp;&amp; g2.parado == true){
            if(g1.image_index == image_index) and (g2.image_index == image_index){
                match = 1;
            }
        }
    }
}
// vertical
if(y&lt;421) and (y&gt;=Yini){
    if( (!position_empty(x,y+65)) and (!position_empty(x,y+130))){
        var g3,g4;
        g3 = instance_position(x,y+65, objGems);
        g4 = instance_position(x,y+130, objGems);
        if(g3.parado == true &amp;&amp; g4.parado == true){
            if(g3.image_index == image_index) and (g4.image_index == image_index){
                match = 2;
            }
        }
    }
}

switch(match){
    case 1:
        with(g1)
        alarm[1]=1;// alarm[1] = destroi peca
        with(g2)
        alarm[1]=1;
        alarm[1]=1;
        match=0;
    break;
    case 2:
        with(g3)
        alarm[1]=1;
        with(g4)
        alarm[1]=1;
        alarm[1]=1;
        match=0;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(off){
    exit;
}
if(!espera){
    //se estiver o lugar abaixo estiver livre e estiver no limite do mapa, a peça desce
    if place_free(x, y+6) and (y&lt;550){
        y+=5;
        with(all){
            parado=false;
        }
    }
    //senão:
    else{    
        parado=true; //peca == parada
        off=true; // peca == desativada
        alarm[0]=5; // 5 frames para o alarm[0] (que verifica se deu match)
        
    }
} else {
    if (!noMatch){
        if(peca1==id){
            if((x&lt;peca2x)and(y==peca2y)) //move para direita
                x+=5;
            else if((x&gt;peca2x)and(y==peca2y)) //move para esquerda
                    x-=5;
            else if((x==peca2x)and(y&lt;peca2y)) //move para baixo
                    y+=5;
            else if((x==peca2x)and(y&gt;peca2y)) //move para cima
                    y-=5;
                    
            if((x==peca2x) and (y==peca2y))
            {
            if(parado){
                with(all)
                {
                    scrMovePecas();
                }
                }
                 exit;
            }
        }
        if(peca2==id){
            if((x&lt;peca1x)and(y==peca1y))
                x+=5;
            else if((x&gt;peca1x)and(y==peca1y))
                    x-=5;
            else if((x==peca1x)and(y&lt;peca1y))
                    y+=5;
            else if((x==peca1x)and(y&gt;peca1y))
                    y-=5;
                    
            if((x==peca1x) and (y==peca1y))
            {
            if(parado){
                with(all)
                {
                    scrMovePecas();
                }
                }
                exit;
            }
        }
    }else{
            if(peca2==id){
                if((x&lt;peca2x)and(y==peca2y)) //move para direita
                    x+=5;
                else if((x&gt;peca2x)and(y==peca2y)) //move para esquerda
                        x-=5;
                else if((x==peca2x)and(y&lt;peca2y)) //move para baixo
                        y+=5;
                else if((x==peca2x)and(y&gt;peca2y)) //move para cima
                        y-=5;
                        
                if((x==peca2x) and (y==peca2y))
                {
                    espera = false;
                    noMatch = false;
                    peca2 = 0;
                        exit;
                }
            }
             if(peca1==id){
                 if((x&lt;peca1x)and(y==peca1y))
                    x+=5;
                 else if((x&gt;peca1x)and(y==peca1y))
                        x-=5;
                 else if((x==peca1x)and(y&lt;peca1y))
                        y+=5;
                 else if((x==peca1x)and(y&gt;peca1y))
                        y-=5;
                        
                 if((x==peca1x) and (y==peca1y))
                 {
                    espera = false;
                    noMatch = false;
                    peca1 = 0;
                        exit;
                }
           }
        
        }    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(parado){
cont = 0;
if(peca2==0) and (y&gt;=Yini){
    if(peca1==0){ //se a peca 1 for vazia
        scrIniciaPeca(); 
    }
    //Desselecionar
    else if(peca1 = id and x = peca1x and y = peca1y){
        peca1 = 0;
        peca1x = 0;
        peca1y = 0;
    }
    else{
        if(peca1!=0 and peca2==0)
        {
            if((x==peca1x+65 and y==peca1y) or (x==peca1x-65 and y==peca1y) or (x==peca1x and y==peca1y+65) or (x==peca1x and y==peca1y-65))
            {
                peca2=id;
                peca2x=x;
                peca2y=y;
                
                with(all)
                    espera=true;
            }
            else
            {
                scrIniciaPeca();
            }
        }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if(peca1 = id) and (peca2 = 0){
    draw_sprite(sprSelecao,0, x, y);
}

/*draw_text(x-20,y+7,y);
draw_text(x-20,y-7,x);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
